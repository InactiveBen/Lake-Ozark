---
interface Props {
  message: string;
  title?: string;
  type?: 'warning' | 'info' | 'error' | 'brand';
  icon?: 'cloud' | 'warning' | 'note' | 'info' | 'error' | 'mail';
  messageId?: string;
  expiresAt?: string;
  fullMessages?: {
    title: string;
    message: string;
    icon?: 'cloud' | 'warning' | 'note' | 'info' | 'error' | 'mail';
  }[];
  readMoreText?: string;
  showMailingList?: boolean; // Added prop for mailing list toggle
}

const { message, title, type = 'brand', icon = 'info', messageId, expiresAt, fullMessages, readMoreText = 'Read Full Alert', showMailingList = false } = Astro.props;

// Map type to colors - all types will use red colors for pulsing
const colors = {
  warning: {
    bg: 'bg-amber-50',
    text: 'text-amber-800',
    icon: 'text-amber-600',
    iconBg: 'bg-amber-100',
    button: 'bg-amber-600 hover:bg-amber-700',
    glow: 'rgba(239, 68, 68, 0.5)' // Red glow
  },
  info: {
    bg: 'bg-blue-50', 
    text: 'text-blue-800',
    icon: 'text-blue-600',
    iconBg: 'bg-blue-100',
    button: 'bg-blue-600 hover:bg-blue-700',
    glow: 'rgba(239, 68, 68, 0.5)' // Red glow
  },
  error: {
    bg: 'bg-red-50',
    text: 'text-red-800',
    icon: 'text-red-600', 
    iconBg: 'bg-red-100',
    button: 'bg-red-600 hover:bg-red-700',
    glow: 'rgba(239, 68, 68, 0.5)' // Red glow
  },
  brand: {
    bg: 'bg-white',
    text: 'text-brand-dark',
    icon: 'text-brand',
    iconBg: 'bg-brand/10',
    button: 'bg-brand hover:bg-brand-dark',
    glow: 'rgba(239, 68, 68, 0.5)' // Red glow
  }
};

// Map icons to SVG paths
const icons = {
  cloud: "M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z",
  warning: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z",
  note: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z",
  info: "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z",
  error: "M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z",
  mail: "M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
};

const color = colors[type];
const uniqueId = messageId || Math.random().toString(36).substring(2, 15);
const isExpired = expiresAt ? new Date() > new Date(expiresAt) : false;
---

{!isExpired && (
  <>
    <div 
      id={`alertSmall-${uniqueId}`}
      class={`fixed md:bottom-4 md:right-4 bottom-0 right-0 left-0 md:left-auto z-50 ${color.bg} shadow-lg rounded-lg md:p-4 p-3 md:max-w-sm w-full md:w-auto animate-slideUp animate-bounce-temp`}
      role="alert"
    >
      <div class="flex items-start gap-3 md:gap-4">
        <div class={`${color.iconBg} rounded-full p-1.5 md:p-2 flex-shrink-0`}>
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            class={`h-4 w-4 md:h-5 md:w-5 ${color.icon}`}
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d={icons[icon]}
            />
          </svg>
        </div>
        
        <div class="flex-1 pt-0.5 md:pt-1">
          {title && (
            <h3 class={`font-semibold ${color.text} text-xs md:text-sm`} set:html={title} />
          )}
          <p class={`${color.text} text-xs md:text-sm mt-0.5 md:mt-1`} set:html={message} />
          {fullMessages && fullMessages.length > 0 && (
            <div class="flex justify-center mt-2">
              <button 
                class={`${color.button} text-white font-bold text-xs md:text-sm py-1.5 md:py-2 px-3 md:px-4 rounded-full transition transform hover:scale-105 hover:shadow-lg flex items-center gap-1 md:gap-2`}
                onclick={`document.getElementById('alertModal-${uniqueId}-0').classList.remove('hidden')`}
              >
                <span>{readMoreText}{fullMessages.length > 1 ? 's' : ''}</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 md:h-4 md:w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                </svg>
              </button>
            </div>
          )}
        </div>

        <button
          class={`${color.text} hover:opacity-75 transition flex-shrink-0`}
          onclick={`document.getElementById('closeConfirm-${uniqueId}').classList.remove('hidden')`}
          aria-label="Dismiss"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 md:h-6 md:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    {fullMessages && fullMessages.map((fullMessage, index) => (
      <div 
        id={`alertModal-${uniqueId}-${index}`}
        class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-[60] flex items-center justify-center animate-fadeIn"
        role="dialog"
        aria-modal="true"
      >
        <div class={`${color.bg} rounded-xl shadow-2xl max-w-md w-full mx-4 p-4 md:p-8 transform transition-all animate-slideIn`}>
          <div class="flex flex-col items-center gap-3 md:gap-5">
            <div class={`${color.iconBg} rounded-full p-2 md:p-4`}>
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                class={`h-8 w-8 md:h-14 md:w-14 ${color.icon}`}
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path 
                  stroke-linecap="round" 
                  stroke-linejoin="round" 
                  stroke-width="2" 
                  d={icons[fullMessage.icon || icon]}
                />
              </svg>
            </div>
            <div class="text-center">
              <h2 class={`text-xl md:text-2xl font-bold mb-2 ${color.text}`} set:html={fullMessage.title} />
              <div class={`${color.text} text-sm md:text-lg whitespace-pre-line`} set:html={fullMessage.message} />
            </div>
            <div class="flex flex-col sm:flex-row gap-2 md:gap-3 justify-center">
              <button
                class={`${color.button} text-white font-bold py-2 md:py-3 px-6 md:px-10 rounded-full transition transform hover:scale-105 hover:shadow-lg text-sm md:text-base`}
                onclick={`document.getElementById('alertModal-${uniqueId}-${index}').classList.add('hidden')`}
              >
                Close
              </button>
              {index < fullMessages.length - 1 && (
                <button
                  class={`${color.button} text-white font-bold py-2 md:py-3 px-6 md:px-10 rounded-full transition transform hover:scale-105 hover:shadow-lg text-sm md:text-base`}
                  onclick={`
                    document.getElementById('alertModal-${uniqueId}-${index}').classList.add('hidden');
                    document.getElementById('alertModal-${uniqueId}-${index + 1}').classList.remove('hidden');
                  `}
                >
                  Next Alert
                </button>
              )}
              {showMailingList && index === fullMessages.length - 1 && (
                <a
                  href="https://lakeozarkdisciples.us7.list-manage.com/subscribe?u=9816d09f0ebdd5f8ce1af28b4&id=b26607b7c1"
                  target="_blank"
                  class={`${color.text} border-2 border-current hover:bg-gray-100 px-6 py-2 md:py-3 rounded-full font-medium transition transform hover:scale-105 hover:shadow-lg text-sm md:text-base text-center`}
                >
                  Join Mailing List
                </a>
              )}
            </div>
          </div>
        </div>
      </div>
    ))}

    {/* Mailing List Confirmation Modal */}
    <div
      id={`mailingListConfirm-${uniqueId}`}
      class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-[70] flex items-center justify-center animate-fadeIn"
      role="dialog"
      aria-modal="true"
    >
      <div class={`${color.bg} rounded-xl shadow-2xl max-w-md w-full mx-4 p-8 transform transition-all animate-slideIn`}>
        <div class="flex flex-col items-center gap-5">
          <div class={`${color.iconBg} rounded-full p-4`}>
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              class={`h-14 w-14 ${color.icon}`}
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                stroke-linecap="round" 
                stroke-linejoin="round" 
                stroke-width="2" 
                d={icons.mail}
              />
            </svg>
          </div>
          <div class="text-center">
            <h2 class={`text-2xl font-bold mb-2 ${color.text}`}>Join Our Mailing List</h2>
            <p class={`${color.text} text-lg`}>
              You will be redirected to our mailing list signup page on MailChimp.
              Would you like to continue?
            </p>
          </div>
          <div class="flex flex-col sm:flex-row gap-3">
            <a
              href="https://lakeozarkdisciples.us7.list-manage.com/subscribe?u=9816d09f0ebdd5f8ce1af28b4&id=b26607b7c1"
              target="_blank"
              class={`${color.button} text-white font-bold py-3 px-10 rounded-full transition transform hover:scale-105 hover:shadow-lg text-center`}
            >
              Continue
            </a>
            <button
              onclick={`document.getElementById('mailingListConfirm-${uniqueId}').classList.add('hidden')`}
              class={`${color.text} border-2 border-current hover:bg-gray-100 px-6 py-3 rounded-full font-medium transition transform hover:scale-105 hover:shadow-lg`}
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>

    {/* Close Confirmation Modal */}
    <div 
      id={`closeConfirm-${uniqueId}`}
      class="hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-[70] flex items-center justify-center animate-fadeIn"
      role="dialog"
      aria-modal="true"
    >
      <div class={`${color.bg} rounded-xl shadow-2xl max-w-sm w-full mx-4 p-4 md:p-6 transform transition-all animate-slideIn`}>
        <div class="text-center">
          <h3 class={`text-lg md:text-xl font-bold mb-2 ${color.text}`}>Close Alert?</h3>
          <p class={`${color.text} text-sm md:text-base mb-4`} id={`closeMessage-${uniqueId}`}>
            This alert won't be shown again.
            <br>
            <b>Are you sure you want to close it?</b>
          </p>
          <div class="flex justify-center gap-3">
            <button
              class={`${color.button} text-white font-bold py-2 px-6 rounded-full text-sm`}
              onclick={`
                const cookieConsent = document.cookie.match(/cookie-consent=(all|required|none)/)?.[1];
                const messageEl = document.getElementById('closeMessage-${uniqueId}');
                const closeConfirmModal = document.getElementById('closeConfirm-${uniqueId}');
                
                if (!cookieConsent) {
                  // No choice made yet - show cookie banner and update message
                  if (messageEl) {
                    messageEl.innerHTML = 'Please choose your cookie preferences first.<br>This will help us remember your choice about this alert.';
                  }
                  document.getElementById('cookie-banner')?.classList.remove('hidden');
                  document.getElementById('cookie-banner-backdrop')?.classList.remove('hidden');
                  
                  // Set up a one-time event listener for cookie changes
                  const checkCookieInterval = setInterval(() => {
                    const currentConsent = document.cookie.match(/cookie-consent=(all|required|none)/)?.[1];
                    if (currentConsent) {
                      clearInterval(checkCookieInterval);
                      
                      if (currentConsent === 'all' || currentConsent === 'required') {
                        // User accepted cookies - set cookie and close
                        const date = new Date();
                        date.setTime(date.getTime() + (5 * 60 * 1000));
                        document.cookie = 'alert-${uniqueId}-hidden=true;expires=' + date.toUTCString() + ';path=/';
                        document.getElementById('alertSmall-${uniqueId}')?.remove();
                        closeConfirmModal?.classList.add('hidden');
                      } else if (currentConsent === 'none') {
                        // User declined cookies - show message and close
                        if (messageEl) {
                          messageEl.innerHTML = 'You have chosen to disable cookies.<br>This alert will reappear on your next visit due to your cookie preferences.';
                          setTimeout(() => {
                            document.getElementById('alertSmall-${uniqueId}')?.remove();
                            closeConfirmModal?.classList.add('hidden');
                          }, 3000);
                        }
                      }
                    }
                  }, 500);
                } else if (cookieConsent === 'all' || cookieConsent === 'required') {
                  // User already accepted cookies - set cookie and close
                  const date = new Date();
                  date.setTime(date.getTime() + (5 * 60 * 1000));
                  document.cookie = 'alert-${uniqueId}-hidden=true;expires=' + date.toUTCString() + ';path=/';
                  document.getElementById('alertSmall-${uniqueId}')?.remove();
                  closeConfirmModal?.classList.add('hidden');
                } else if (cookieConsent === 'none') {
                  // User already declined cookies - show message and close
                  if (messageEl) {
                    messageEl.innerHTML = 'You have chosen to disable cookies.<br>This alert will reappear on your next visit due to your cookie preferences.';
                    setTimeout(() => {
                      document.getElementById('alertSmall-${uniqueId}')?.remove();
                      closeConfirmModal?.classList.add('hidden');
                    }, 3000);
                  }
                }
              `}
            >
              Yes, close it
            </button>
            <button
              class={`${color.text} border border-current px-6 py-2 rounded-full text-sm`}
              onclick={`document.getElementById('closeConfirm-${uniqueId}').classList.add('hidden')`}
            >
              Keep open
            </button>
          </div>
        </div>
      </div>
    </div>
  </>
)}

<style>
  @keyframes slideUp {
    from {
      transform: translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideIn {
    from { 
      opacity: 0;
      transform: translateY(-10%);
    }
    to { 
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
    60% {
      transform: translateY(-5px);
    }
  }

  @keyframes glow-error {
    0%, 100% {
      box-shadow: 0 0 5px rgba(239, 68, 68, 0.5);
      transform: translateY(0);
    }
    50% {
      box-shadow: 0 0 20px rgba(239, 68, 68, 0.8); 
      transform: translateY(-5px);
    }
  }

  .animate-slideUp {
    animation: slideUp 0.3s ease-out;
  }

  .animate-fadeIn {
    animation: fadeIn 0.3s ease-out;
  }

  .animate-slideIn {
    animation: slideIn 0.4s ease-out;
  }

  .animate-bounce-temp {
    animation: bounce 2s ease-in-out 1s forwards;
    animation-iteration-count: 2;
  }
</style>

<script define:vars={{ uniqueId, messageId, expiresAt }}>
  const alert = document.getElementById(`alertSmall-${uniqueId}`);
  const modals = Array.from(document.querySelectorAll(`[id^="alertModal-${uniqueId}-"]`));
  const mailingListConfirm = document.getElementById(`mailingListConfirm-${uniqueId}`);
  
  if (messageId) {
    // Check if alert has expired or was dismissed
    const isExpired = expiresAt ? new Date() > new Date(expiresAt) : false;
    if (sessionStorage.getItem(`alert-${messageId}`) === 'dismissed' || isExpired) {
      alert?.remove();
      modals.forEach(modal => modal.remove());
      mailingListConfirm?.remove();
    }
  }

  // Close modal on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      modals.forEach(modal => modal.classList.add('hidden'));
      mailingListConfirm?.classList.add('hidden');
    }
  });

  // Close modal on backdrop click
  modals.forEach(modal => {
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });
  });

  // Close mailing list confirm on backdrop click
  mailingListConfirm?.addEventListener('click', (e) => {
    if (e.target === mailingListConfirm) {
      mailingListConfirm.classList.add('hidden');
    }
  });

  function checkCookieConsent() {
    const cookieConsent = document.cookie.match(/cookie-consent=(all|partial|required|none)/)?.[1];
    return cookieConsent === 'all' || cookieConsent === 'partial' || cookieConsent === 'required';
  }

  function canSetCookies() {
    const cookieConsent = document.cookie.match(/cookie-consent=(all|partial|required|none)/)?.[1];
    return cookieConsent === 'all' || cookieConsent === 'required';
  }

  function handleAlertClose(alertId) {
    if (canSetCookies()) {
      const date = new Date();
      date.setTime(date.getTime() + (5 * 60 * 1000));
      document.cookie = `alert-${alertId}-hidden=true;expires=${date.toUTCString()};path=/;SameSite=Strict`;
      document.getElementById(`alertSmall-${alertId}`)?.remove();
    } else {
      // If cookies are not allowed, just hide the alert for this session
      document.getElementById(`alertSmall-${alertId}`)?.remove();
    }
  }

  // Update the cookie check at load
  if (canSetCookies() && document.cookie.includes(`alert-${uniqueId}-hidden=true`)) {
    document.getElementById(`alertSmall-${uniqueId}`)?.remove();
  }

  // Listen for cookie preference changes
  window.addEventListener('cookiePreferencesChanged', (event) => {
    const { consentLevel } = event.detail;
    if (consentLevel === 'none') {
      // Remove any existing alert cookies
      document.cookie = `alert-${uniqueId}-hidden=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
    }
  });

  // Close confirmation modal on backdrop click
  const closeConfirm = document.getElementById(`closeConfirm-${uniqueId}`);
  closeConfirm?.addEventListener('click', (e) => {
    if (e.target === closeConfirm) {
      closeConfirm.classList.add('hidden');
    }
  });

  // Close confirmation modal on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeConfirm?.classList.add('hidden');
    }
  });
</script>
