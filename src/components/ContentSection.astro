---
export interface Props {
  badge: string;
  title: string;
  description: string;
  content: string;
  imageUrl?: string;
  imageAlt?: string;
  reverse?: boolean;
  buttons?: Array<{
    text: string;
    href: string;
    primary?: boolean;
    external?: boolean;
  }>;
  features?: Array<{
    icon: string;
    title: string;
    description: string;
  }>;
}

const {
  badge,
  title,
  description,
  content,
  imageUrl,
  imageAlt,
  reverse = false,
  buttons = [],
  features = []
} = Astro.props;

const gridClass = "lg:grid-cols-2";
const orderClass = reverse ? "lg:order-2" : "lg:order-1";
const contentOrderClass = reverse ? "lg:order-1" : "lg:order-2";
---

<section class="py-20 bg-white">
  <div class="container mx-auto px-6">
    <div class="max-w-7xl mx-auto">
      <div class={`grid ${gridClass} gap-16 items-center`}>
        <div class={orderClass}>
          <span class="inline-block px-4 py-2 bg-brand/10 text-brand text-sm font-medium mb-6">
            {badge}
          </span>
          <h2 class="text-4xl lg:text-5xl font-light mb-8 text-gray-900 leading-tight">
            {title}
          </h2>
          <div class="space-y-6">
            <p class="text-lg text-gray-600 leading-relaxed">
              {description}
            </p>
            
            {features.length > 0 && (
              <div class="bg-gray-50 rounded-xl p-6 space-y-4">
                {features.map((feature) => (
                  <div class="flex items-start gap-3">
                    <svg class="w-6 h-6 text-brand mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <Fragment set:html={feature.icon} />
                    </svg>
                    <div>
                      <h3 class="font-medium text-gray-900">{feature.title}</h3>
                      <p class="text-gray-600">{feature.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            )}
            
            {content && (
              <p class="text-lg text-gray-600 leading-relaxed">
                <Fragment set:html={content} />
              </p>
            )}
            
            {buttons.length > 0 && (
              <div class="flex flex-col sm:flex-row gap-4">
                {buttons.map((button) => (
                  <a 
                    href={button.href} 
                    class={`inline-flex items-center justify-center px-8 py-4 font-medium rounded-lg transition-all duration-300 ${
                      button.primary 
                        ? 'bg-brand hover:bg-brand-dark text-white' 
                        : 'bg-gray-900 hover:bg-gray-800 text-white'
                    }`}
                    target={button.external ? "_blank" : undefined}
                    rel={button.external ? "noopener noreferrer" : undefined}
                  >
                    {button.text}
                  </a>
                ))}
              </div>
            )}
          </div>
        </div>
        {imageUrl && (
          <div class={`relative ${contentOrderClass}`}>
            <img 
              src={imageUrl}
              alt={imageAlt || title}
              class="w-full h-[600px] object-cover rounded-2xl"
            />
          </div>
        )}
      </div>
    </div>
  </div>
</section>
