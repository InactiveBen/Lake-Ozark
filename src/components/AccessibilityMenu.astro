---
const color = {
  bg: 'bg-white',
  text: 'text-gray-900', 
  button: 'bg-brand hover:bg-brand-dark'
};
---

<button
  id="accessibility-toggle"
  class="fixed top-1/2 right-0 transform -translate-y-1/2 z-50 p-3 bg-brand text-white rounded-l-full shadow-lg hover:bg-brand-dark focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 transition-all duration-300"
  aria-label="Toggle accessibility menu"
  aria-expanded="false"
  aria-controls="accessibility-menu"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 16 16">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8ZM9.25 3.75C9.25 4.44036 8.69036 5 8 5C7.30964 5 6.75 4.44036 6.75 3.75C6.75 3.05964 7.30964 2.5 8 2.5C8.69036 2.5 9.25 3.05964 9.25 3.75ZM12 8H9.41901L11.2047 13H9.081L8 9.97321L6.91901 13H4.79528L6.581 8H4V6H12V8Z"/>
  </svg>
</button>

<div id="accessibility-notification" class="fixed top-4 right-4 z-50 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg hidden transition-all duration-300" role="alert">
  <span class="block sm:inline" id="notification-message"></span>
</div>

<div
  id="accessibility-menu"
  class="fixed top-1/2 right-16 transform -translate-y-1/2 z-50 w-80 bg-white rounded-xl shadow-2xl border border-gray-200 p-6 hidden transition-all duration-300 ease-in-out"
  role="dialog"
  aria-labelledby="accessibility-title"
  style="font-family: 'Albert Sans', system-ui, sans-serif;"
>
  <div class="flex justify-between items-center mb-6">
    <h2 id="accessibility-title" class="text-xl font-semibold text-gray-900">Accessibility Settings</h2>
    <button
      id="close-accessibility"
      class="text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 rounded-lg p-1 transition-colors duration-200"
      aria-label="Close accessibility menu"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>

  <div class="space-y-6">
    <!-- Font Size -->
    <div>
      <label for="font-size" class="block text-sm font-medium text-gray-700 mb-2">Font Size</label>
      <div class="flex items-center gap-3">
        <button
          id="decrease-font"
          class="p-2 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 transition-colors duration-200 text-sm font-medium"
          aria-label="Decrease font size"
        >A-</button>
        <input
          type="range"
          id="font-size"
          min="80"
          max="150"
          value="100"
          step="10"
          class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
          aria-label="Font size adjustment"
        />
        <button
          id="increase-font"
          class="p-2 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 transition-colors duration-200 text-sm font-medium"
          aria-label="Increase font size"
        >A+</button>
      </div>
    </div>

    <!-- Contrast -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-3">Contrast</label>
      <div class="flex gap-2">
        <button
          id="normal-contrast"
          class="flex-1 py-3 px-4 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
          aria-pressed="true"
        >
          Normal
        </button>
        <button
          id="high-contrast"
          class="flex-1 py-3 px-4 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
          aria-pressed="false"
        >
          High Contrast
        </button>
      </div>
    </div>

    <!-- Highlight Links -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-3">Highlight Links</label>
      <div class="flex gap-2">
        <button
          id="normal-links"
          class="flex-1 py-3 px-4 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
          aria-pressed="true"
        >
          Normal
        </button>
        <button
          id="highlight-links"
          class="flex-1 py-3 px-4 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
          aria-pressed="false"
        >
          Highlight
        </button>
      </div>
    </div>

    <!-- Hide Images -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-3">Images</label>
      <div class="flex gap-2">
        <button
          id="show-images"
          class="flex-1 py-3 px-4 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
          aria-pressed="true"
        >
          Show
        </button>
        <button
          id="hide-images"
          class="flex-1 py-3 px-4 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
          aria-pressed="false"
        >
          Hide
        </button>
      </div>
    </div>

    <!-- Font Family -->
    <div>
      <label for="font-family" class="block text-sm font-medium text-gray-700 mb-2">Font Type</label>
      <select
        id="font-family"
        class="w-full rounded-lg border-gray-300 shadow-sm focus:border-brand focus:ring-brand text-sm py-3 px-4 bg-white"
      >
        <option value="default">Default</option>
        <option value="readable">More Readable</option>
        <option value="dyslexic">Dyslexic Friendly</option>
        <option value="bionic">Bionic Reading</option>
      </select>
    </div>

    <!-- Line Height -->
    <div>
      <label for="line-height" class="block text-sm font-medium text-gray-700 mb-2">Line Spacing</label>
      <select
        id="line-height"
        class="w-full rounded-lg border-gray-300 shadow-sm focus:border-brand focus:ring-brand text-sm py-3 px-4 bg-white"
      >
        <option value="normal">Normal</option>
        <option value="relaxed">Relaxed</option>
        <option value="loose">Loose</option>
      </select>
    </div>

    <!-- Reset Button -->
    <button
      id="reset-accessibility"
      class="w-full mt-6 py-3 px-4 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
    >
      Reset to Default
    </button>
  </div>

  <!-- Cookie Consent Modal -->
  <div 
    id="cookie-consent-modal" 
    class="fixed inset-0 bg-black/50 backdrop-blur-sm z-[101] hidden"
    role="dialog"
    aria-labelledby="cookie-consent-title"
  >
    <div class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-xl shadow-xl p-6 max-w-md w-[95%]">
      <h3 id="cookie-consent-title" class="text-lg font-semibold mb-3 text-gray-900">Save Your Settings?</h3>
      <p class="text-gray-600 text-sm mb-4 leading-relaxed">
        To save your accessibility preferences, we need your permission to use cookies. Would you like to:
      </p>
      <div class="flex flex-col gap-3">
        <button
          id="enable-cookies"
          class="w-full py-3 px-4 bg-brand text-white rounded-lg hover:bg-brand-dark focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
        >
          Open Cookie Preferences
        </button>
        <button
          id="continue-without-saving"
          class="w-full py-3 px-4 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 text-sm font-medium transition-all duration-200"
        >
          Continue Without Saving
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Store default values
  const defaultSettings = {
    fontSize: 100,
    contrast: 'normal',
    fontFamily: 'default',
    lineHeight: 'normal',
    highlightLinks: 'normal',
    hideImages: false
  };

  // Debounce function
  function debounce<T extends (...args: any[]) => any>(func: T, wait: number): (...args: Parameters<T>) => void {
    let timeout: ReturnType<typeof setTimeout>;
    return function executedFunction(...args: Parameters<T>) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Check if cookies are enabled
  function areCookiesEnabled(): boolean {
    const cookieEnabled = navigator.cookieEnabled;
    if (!cookieEnabled) {
      showNotification("Cookie access is required to save accessibility settings.", "warning");
      return false;
    }
    return true;
  }

  // Show notification
  const showNotification = debounce((message: string, type: 'success' | 'warning' = 'success') => {
    const notification = document.getElementById('accessibility-notification');
    const messageEl = document.getElementById('notification-message');
    if (notification && messageEl) {
      messageEl.textContent = message;
      notification.classList.remove('hidden', 'bg-green-100', 'border-green-400', 'text-green-700', 'bg-yellow-100', 'border-yellow-400', 'text-yellow-700');
      
      if (type === 'warning') {
        notification.classList.add('bg-yellow-100', 'border-yellow-400', 'text-yellow-700');
      } else {
        notification.classList.add('bg-green-100', 'border-green-400', 'text-green-700');
      }
      
      notification.classList.remove('hidden');
      setTimeout(() => {
        notification.classList.add('hidden');
      }, 5000);
    }
  }, 1000);

  // Load saved settings from cookies
  function loadSettings() {
    if (!areCookiesEnabled()) {
      return defaultSettings;
    }
    
    // Check for personalization cookie consent
    const cookieConsent = document.cookie.split('; ').find(row => row.startsWith('cookie-consent='));
    if (!cookieConsent) {
      return defaultSettings;
    }

    const consentValue = decodeURIComponent(cookieConsent.split('=')[1]);
    // Check if personalization is allowed based on consent level
    if (consentValue !== 'all' && consentValue !== 'partial') {
      return defaultSettings;
    }
    
    const saved = document.cookie.split('; ').find(row => row.startsWith('accessibility-settings='));
    if (saved) {
      try {
        const settings = JSON.parse(decodeURIComponent(saved.split('=')[1]));
        return { ...defaultSettings, ...settings };
      } catch (e) {
        console.error('Error parsing accessibility settings:', e);
        return defaultSettings;
      }
    }
    return defaultSettings;
  }

  // Save settings to cookies
  function saveSettings(settings: typeof defaultSettings) {
    if (!areCookiesEnabled()) {
      showNotification("Cannot save settings - please enable cookies in your privacy settings.", "warning");
      return;
    }

    // Check for personalization cookie consent
    const cookieConsent = document.cookie.split('; ').find(row => row.startsWith('cookie-consent='));
    if (!cookieConsent) {
      showNotification("Please enable personalization cookies in the cookie settings to save your accessibility preferences.", "warning");
      return;
    }

    const consentValue = decodeURIComponent(cookieConsent.split('=')[1]);
    // Only allow saving if user has accepted all or partial cookies
    if (consentValue !== 'all' && consentValue !== 'partial') {
      showNotification("Please enable personalization cookies in the cookie settings to save your accessibility preferences.", "warning");
      return;
    }
    
    const oneYear = 365 * 24 * 60 * 60 * 1000;
    const expires = new Date(Date.now() + oneYear).toUTCString();
    document.cookie = `accessibility-settings=${encodeURIComponent(JSON.stringify(settings))}; expires=${expires}; path=/`;
    showNotification("Settings saved successfully");
  }

  // Apply settings to the page
  function applySettings(settings: typeof defaultSettings) {
    // Font size - Apply to html element for global scaling
    const fontScale = settings.fontSize / 100;
    document.documentElement.style.setProperty('--accessibility-font-scale', settings.fontSize.toString());
    document.documentElement.style.fontSize = `${fontScale * 16}px`; // Base font size of 16px
    
    // Also apply a class for CSS targeting
    document.body.classList.remove('font-size-80', 'font-size-90', 'font-size-100', 'font-size-110', 'font-size-120', 'font-size-130', 'font-size-140', 'font-size-150');
    document.body.classList.add(`font-size-${settings.fontSize}`);
    
    // Contrast
    if (settings.contrast === 'high') {
      document.body.classList.add('high-contrast');
      document.documentElement.style.setProperty('--text-color', '#000000');
      document.documentElement.style.setProperty('--background-color', '#FFFFFF');
      document.documentElement.style.setProperty('--link-color', '#0000EE');
    } else {
      document.body.classList.remove('high-contrast');
      document.documentElement.style.removeProperty('--text-color');
      document.documentElement.style.removeProperty('--background-color');
      document.documentElement.style.removeProperty('--link-color');
    }

    // Highlight Links
    if (settings.highlightLinks === 'highlight') {
      document.body.classList.add('highlight-links');
    } else {
      document.body.classList.remove('highlight-links');
    }

    // Hide Images
    if (settings.hideImages) {
      document.body.classList.add('hide-images');
    } else {
      document.body.classList.remove('hide-images');
    }

    // Font family - Apply more broadly
    document.body.classList.remove('readable-font', 'dyslexic-font', 'bionic-font');
    disableBionicReading();
    
    if (settings.fontFamily === 'readable') {
      document.body.classList.add('readable-font');
    } else if (settings.fontFamily === 'dyslexic') {
      document.body.classList.add('dyslexic-font');
    } else if (settings.fontFamily === 'bionic') {
      document.body.classList.add('bionic-font');
      enableBionicReading();
    }

    // Line height - Apply more comprehensively
    document.body.classList.remove('relaxed-spacing', 'loose-spacing');
    if (settings.lineHeight === 'relaxed') {
      document.body.classList.add('relaxed-spacing');
    } else if (settings.lineHeight === 'loose') {
      document.body.classList.add('loose-spacing');
    }

    showNotification("Accessibility settings updated successfully");
  }

  // Enable bionic reading
  function enableBionicReading() {
    const textNodes = document.evaluate(
      "//text()[not(ancestor::script) and not(ancestor::style)]",
      document.body,
      null,
      XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
      null
    );

    for (let i = 0; i < textNodes.snapshotLength; i++) {
      const node = textNodes.snapshotItem(i);
      if (node && node.textContent && node.parentElement && !node.parentElement.classList.contains('bionic-processed')) {
        const words = node.textContent.split(/\s+/);
        const bionicWords = words.map(word => {
          if (word.length <= 3) return word;
          const midPoint = Math.ceil(word.length * 0.4);
          return `<strong>${word.slice(0, midPoint)}</strong>${word.slice(midPoint)}`;
        });
        const span = document.createElement('span');
        span.classList.add('bionic-processed');
        span.innerHTML = bionicWords.join(' ');
        node.parentElement.replaceChild(span, node);
      }
    }
  }

  // Disable bionic reading
  function disableBionicReading() {
    const bionicElements = document.querySelectorAll('.bionic-processed');
    bionicElements.forEach(element => {
      if (element.parentElement) {
        const text = element.textContent || '';
        const textNode = document.createTextNode(text);
        element.parentElement.replaceChild(textNode, element);
      }
    });
  }

  // Check cookie warning and return boolean
  function checkCookieWarning(): boolean {
    const cookieConsent = document.cookie.split('; ').find(row => row.startsWith('cookie-consent='));
    const consentValue = cookieConsent ? decodeURIComponent(cookieConsent.split('=')[1]) : null;
    
    if (!cookieConsent || (consentValue !== 'all' && consentValue !== 'partial')) {
      const modal = document.getElementById('cookie-consent-modal');
      const enableButton = document.getElementById('enable-cookies');
      const continueButton = document.getElementById('continue-without-saving');
      
      if (modal && enableButton && continueButton) {
        modal.classList.remove('hidden');
        
        // Enable cookies button
        enableButton.onclick = () => {
          modal.classList.add('hidden');
          const cookieBanner = document.getElementById('cookie-banner');
          const cookieBannerBackdrop = document.getElementById('cookie-banner-backdrop');
          if (cookieBanner) cookieBanner.classList.remove('hidden');
          if (cookieBannerBackdrop) cookieBannerBackdrop.classList.remove('hidden');
        };
        
        // Continue without saving button
        continueButton.onclick = () => {
          modal.classList.add('hidden');
          showNotification("Changes will not be saved due to your cookie preferences", "warning");
        };
        
        // Close modal on escape
        const handleEscape = (e: KeyboardEvent) => {
          if (e.key === 'Escape') {
            modal.classList.add('hidden');
            modal.removeEventListener('keydown', handleEscape);
          }
        };
        modal.addEventListener('keydown', handleEscape);
        
        // Close on backdrop click
        const handleBackdropClick = (e: Event) => {
          if (e.target === modal) {
            modal.classList.add('hidden');
            modal.removeEventListener('click', handleBackdropClick);
          }
        };
        modal.addEventListener('click', handleBackdropClick);
      }
      return true;
    }
    return false;
  }

  // Debounced version of cookie warning check
  const showCookieWarning = debounce(checkCookieWarning, 1000);

  document.addEventListener('DOMContentLoaded', () => {
    const settings = loadSettings();
    const menu = document.getElementById('accessibility-menu');
    const toggle = document.getElementById('accessibility-toggle');
    const closeBtn = document.getElementById('close-accessibility');
    const fontSizeInput = document.getElementById('font-size') as HTMLInputElement;
    const fontFamily = document.getElementById('font-family') as HTMLSelectElement;
    const lineHeight = document.getElementById('line-height') as HTMLSelectElement;
    const normalContrast = document.getElementById('normal-contrast');
    const highContrast = document.getElementById('high-contrast');
    const normalLinks = document.getElementById('normal-links');
    const highlightLinks = document.getElementById('highlight-links');
    const showImages = document.getElementById('show-images');
    const hideImages = document.getElementById('hide-images');
    const decreaseFont = document.getElementById('decrease-font');
    const increaseFont = document.getElementById('increase-font');
    const resetButton = document.getElementById('reset-accessibility');

    // Toggle menu
    toggle?.addEventListener('click', () => {
      const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
      toggle.setAttribute('aria-expanded', (!isExpanded).toString());
      menu?.classList.toggle('hidden');
    });

    // Close menu button
    closeBtn?.addEventListener('click', () => {
      toggle?.setAttribute('aria-expanded', 'false');
      menu?.classList.add('hidden');
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!menu?.contains(e.target as Node) && 
          !toggle?.contains(e.target as Node) && 
          !menu?.classList.contains('hidden')) {
        toggle?.setAttribute('aria-expanded', 'false');
        menu?.classList.add('hidden');
      }
    });

    // Handle escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !menu?.classList.contains('hidden')) {
        toggle?.setAttribute('aria-expanded', 'false');
        menu?.classList.add('hidden');
      }
    });

    // Apply initial settings
    applySettings(settings);

    // Initialize UI with saved settings
    if (fontSizeInput) fontSizeInput.value = settings.fontSize.toString();
    if (fontFamily) fontFamily.value = settings.fontFamily;
    if (lineHeight) lineHeight.value = settings.lineHeight;
    if (normalContrast) normalContrast.setAttribute('aria-pressed', (settings.contrast === 'normal').toString());
    if (highContrast) highContrast.setAttribute('aria-pressed', (settings.contrast === 'high').toString());
    if (normalLinks) normalLinks.setAttribute('aria-pressed', (settings.highlightLinks === 'normal').toString());
    if (highlightLinks) highlightLinks.setAttribute('aria-pressed', (settings.highlightLinks === 'highlight').toString());
    if (showImages) showImages.setAttribute('aria-pressed', (!settings.hideImages).toString());
    if (hideImages) hideImages.setAttribute('aria-pressed', settings.hideImages.toString());

    // Font size controls
    fontSizeInput?.addEventListener('input', (e) => {
      if (checkCookieWarning()) return;
      const value = parseInt((e.target as HTMLInputElement).value);
      settings.fontSize = value;
      saveSettings(settings);
      applySettings(settings);
    });

    decreaseFont?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      const newValue = Math.max(80, parseInt(fontSizeInput.value) - 10);
      fontSizeInput.value = newValue.toString();
      settings.fontSize = newValue;
      saveSettings(settings);
      applySettings(settings);
    });

    increaseFont?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      const newValue = Math.min(150, parseInt(fontSizeInput.value) + 10);
      fontSizeInput.value = newValue.toString();
      settings.fontSize = newValue;
      saveSettings(settings);
      applySettings(settings);
    });

    // Contrast controls
    normalContrast?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      settings.contrast = 'normal';
      normalContrast.setAttribute('aria-pressed', 'true');
      highContrast?.setAttribute('aria-pressed', 'false');
      normalContrast.classList.add('bg-brand', 'text-white');
      normalContrast.classList.remove('bg-gray-100');
      highContrast?.classList.remove('bg-brand', 'text-white');
      highContrast?.classList.add('bg-gray-100');
      saveSettings(settings);
      applySettings(settings);
    });

    highContrast?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      settings.contrast = 'high';
      highContrast.setAttribute('aria-pressed', 'true');
      normalContrast?.setAttribute('aria-pressed', 'false');
      highContrast.classList.add('bg-brand', 'text-white');
      highContrast.classList.remove('bg-gray-100');
      normalContrast?.classList.remove('bg-brand', 'text-white');
      normalContrast?.classList.add('bg-gray-100');
      saveSettings(settings);
      applySettings(settings);
    });

    // Link highlight controls
    normalLinks?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      settings.highlightLinks = 'normal';
      normalLinks.setAttribute('aria-pressed', 'true');
      highlightLinks?.setAttribute('aria-pressed', 'false');
      normalLinks.classList.add('bg-brand', 'text-white');
      normalLinks.classList.remove('bg-gray-100');
      highlightLinks?.classList.remove('bg-brand', 'text-white');
      highlightLinks?.classList.add('bg-gray-100');
      saveSettings(settings);
      applySettings(settings);
    });

    highlightLinks?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      settings.highlightLinks = 'highlight';
      highlightLinks.setAttribute('aria-pressed', 'true');
      normalLinks?.setAttribute('aria-pressed', 'false');
      highlightLinks.classList.add('bg-brand', 'text-white');
      highlightLinks.classList.remove('bg-gray-100');
      normalLinks?.classList.remove('bg-brand', 'text-white');
      normalLinks?.classList.add('bg-gray-100');
      saveSettings(settings);
      applySettings(settings);
    });

    // Image visibility controls
    showImages?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      settings.hideImages = false;
      showImages.setAttribute('aria-pressed', 'true');
      hideImages?.setAttribute('aria-pressed', 'false');
      showImages.classList.add('bg-brand', 'text-white');
      showImages.classList.remove('bg-gray-100');
      hideImages?.classList.remove('bg-brand', 'text-white');
      hideImages?.classList.add('bg-gray-100');
      saveSettings(settings);
      applySettings(settings);
    });

    hideImages?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      settings.hideImages = true;
      hideImages.setAttribute('aria-pressed', 'true');
      showImages?.setAttribute('aria-pressed', 'false');
      hideImages.classList.add('bg-brand', 'text-white');
      hideImages.classList.remove('bg-gray-100');
      showImages?.classList.remove('bg-brand', 'text-white');
      showImages?.classList.add('bg-gray-100');
      saveSettings(settings);
      applySettings(settings);
    });

    // Font family control
    fontFamily?.addEventListener('change', (e) => {
      if (checkCookieWarning()) return;
      settings.fontFamily = (e.target as HTMLSelectElement).value;
      saveSettings(settings);
      applySettings(settings);
    });

    // Line height control
    lineHeight?.addEventListener('change', (e) => {
      if (checkCookieWarning()) return;
      settings.lineHeight = (e.target as HTMLSelectElement).value;
      saveSettings(settings);
      applySettings(settings);
    });

    // Reset button
    resetButton?.addEventListener('click', () => {
      if (checkCookieWarning()) return;
      Object.assign(settings, defaultSettings);
      
      if (fontSizeInput) fontSizeInput.value = defaultSettings.fontSize.toString();
      if (fontFamily) fontFamily.value = defaultSettings.fontFamily;
      if (lineHeight) lineHeight.value = defaultSettings.lineHeight;
      
      // Reset all accessibility classes
      document.documentElement.style.fontSize = '';
      document.body.classList.remove('font-size-80', 'font-size-90', 'font-size-100', 'font-size-110', 'font-size-120', 'font-size-130', 'font-size-140', 'font-size-150');
      document.body.classList.remove('readable-font', 'dyslexic-font', 'bionic-font');
      document.body.classList.remove('relaxed-spacing', 'loose-spacing');
      document.body.classList.remove('high-contrast', 'highlight-links', 'hide-images');
      disableBionicReading();
      
      // Reset button states
      normalContrast?.setAttribute('aria-pressed', 'true');
      highContrast?.setAttribute('aria-pressed', 'false');
      normalLinks?.setAttribute('aria-pressed', 'true');
      highlightLinks?.setAttribute('aria-pressed', 'false');
      showImages?.setAttribute('aria-pressed', 'true');
      hideImages?.setAttribute('aria-pressed', 'false');
      
      // Reset button styles
      normalContrast?.classList.add('bg-brand', 'text-white');
      normalContrast?.classList.remove('bg-gray-100');
      highContrast?.classList.remove('bg-brand', 'text-white');
      highContrast?.classList.add('bg-gray-100');
      
      normalLinks?.classList.add('bg-brand', 'text-white');
      normalLinks?.classList.remove('bg-gray-100');
      highlightLinks?.classList.remove('bg-brand', 'text-white');
      highlightLinks?.classList.add('bg-gray-100');
      
      showImages?.classList.add('bg-brand', 'text-white');
      showImages?.classList.remove('bg-gray-100');
      hideImages?.classList.remove('bg-brand', 'text-white');
      hideImages?.classList.add('bg-gray-100');
      
      saveSettings(settings);
      applySettings(settings);
      showNotification("Settings reset to default");
    });

    // Initialize button states on load
    const initializeButtonStates = () => {
      if (settings.contrast === 'high') {
        highContrast?.classList.add('bg-brand', 'text-white');
        highContrast?.classList.remove('bg-gray-100');
        normalContrast?.classList.remove('bg-brand', 'text-white');
        normalContrast?.classList.add('bg-gray-100');
      } else {
        normalContrast?.classList.add('bg-brand', 'text-white');
        normalContrast?.classList.remove('bg-gray-100');
        highContrast?.classList.remove('bg-brand', 'text-white');
        highContrast?.classList.add('bg-gray-100');
      }
      
      if (settings.highlightLinks === 'highlight') {
        highlightLinks?.classList.add('bg-brand', 'text-white');
        highlightLinks?.classList.remove('bg-gray-100');
        normalLinks?.classList.remove('bg-brand', 'text-white');
        normalLinks?.classList.add('bg-gray-100');
      } else {
        normalLinks?.classList.add('bg-brand', 'text-white');
        normalLinks?.classList.remove('bg-gray-100');
        highlightLinks?.classList.remove('bg-brand', 'text-white');
        highlightLinks?.classList.add('bg-gray-100');
      }
      
      if (settings.hideImages) {
        hideImages?.classList.add('bg-brand', 'text-white');
        hideImages?.classList.remove('bg-gray-100');
        showImages?.classList.remove('bg-brand', 'text-white');
        showImages?.classList.add('bg-gray-100');
      } else {
        showImages?.classList.add('bg-brand', 'text-white');
        showImages?.classList.remove('bg-gray-100');
        hideImages?.classList.remove('bg-brand', 'text-white');
        hideImages?.classList.add('bg-gray-100');
      }
    };
    
    initializeButtonStates();
  });
</script>

<style is:global>
  :root {
    --accessibility-font-scale: 100;
    --text-color: inherit;
    --background-color: inherit;
    --link-color: inherit;
  }

  /* Font size classes */
  .font-size-80 { font-size: 0.8rem !important; }
  .font-size-90 { font-size: 0.9rem !important; }
  .font-size-100 { font-size: 1rem !important; }
  .font-size-110 { font-size: 1.1rem !important; }
  .font-size-120 { font-size: 1.2rem !important; }
  .font-size-130 { font-size: 1.3rem !important; }
  .font-size-140 { font-size: 1.4rem !important; }
  .font-size-150 { font-size: 1.5rem !important; }

  /* Font family classes */
  .readable-font,
  .readable-font * {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif !important;
  }

  .dyslexic-font,
  .dyslexic-font * {
    font-family: "OpenDyslexic", "Comic Sans MS", cursive !important;
  }

  /* Line spacing classes */
  .relaxed-spacing,
  .relaxed-spacing p,
  .relaxed-spacing div,
  .relaxed-spacing span,
  .relaxed-spacing li {
    line-height: 1.75 !important;
  }

  .loose-spacing,
  .loose-spacing p,
  .loose-spacing div,
  .loose-spacing span,
  .loose-spacing li {
    line-height: 2 !important;
  }

  /* High contrast mode */
  .high-contrast {
    --text-color: #000000 !important;
    --background-color: #FFFFFF !important;
    --link-color: #0000EE !important;
  }

  .high-contrast * {
    color: var(--text-color) !important;
    background-color: var(--background-color) !important;
  }

  .high-contrast a {
    color: var(--link-color) !important;
  }

  .high-contrast button,
  .high-contrast [role="button"] {
    border: 2px solid currentColor !important;
  }

  /* Link highlighting */
  .highlight-links a {
    background-color: #ffd900 !important;
    color: #000000 !important;
    font-weight: bold !important;
    font-size: calc(100% + 5%) !important;
    padding: 2px 4px;
    border-radius: 4px;
    text-decoration: underline;
    box-shadow: 0 0 0 2px #ffd900;
  }

  /* Hide images */
  .hide-images img,
  .hide-images [role="img"] {
    display: none !important;
  }

  /* Bionic reading */
  .bionic-processed strong {
    font-weight: 700;
    color: inherit;
  }

  /* Enhanced slider styling to match design */
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    width: 100%;
    height: 8px;
    border-radius: 4px;
    background: #E5E7EB;
    outline: none;
    cursor: pointer;
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #8B5A2B;
    cursor: pointer;
    border: 2px solid white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }

  input[type="range"]::-webkit-slider-thumb:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  input[type="range"]::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #8B5A2B;
    cursor: pointer;
    border: 2px solid white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }

  input[type="range"]::-moz-range-thumb:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  /* Albert Sans font integration */
  #accessibility-menu {
    font-family: 'Albert Sans', system-ui, sans-serif;
  }

  #accessibility-menu h2,
  #accessibility-menu label,
  #accessibility-menu button,
  #accessibility-menu select {
    font-family: 'Albert Sans', system-ui, sans-serif;
  }
</style>
