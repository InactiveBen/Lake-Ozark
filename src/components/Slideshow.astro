---
interface Props {
  images: {
    url: string;
    alt: string;
  }[];
  height?: string;
}

const { images, height = "h-[60vh]" } = Astro.props;
---

<div class="relative group">
  <div class={`relative ${height} overflow-hidden`}>
    <div class="absolute inset-0 flex transition-transform duration-500" id="slideContainer">
      {images.map((image) => (
        <div class="w-full flex-shrink-0">
          <img
            src={image.url}
            alt={image.alt}
            class="w-full h-full object-cover"
          />
        </div>
      ))}
    </div>
    
    <!-- Navigation buttons -->
    <button 
      class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/90 text-gray-800 p-3 rounded-full hover:bg-white transition transform hover:scale-110 shadow-lg opacity-0 group-hover:opacity-100 z-20"
      id="prevButton"
      aria-label="Previous slide"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    
    <button 
      class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/90 text-gray-800 p-3 rounded-full hover:bg-white transition transform hover:scale-110 shadow-lg opacity-0 group-hover:opacity-100 z-20"
      id="nextButton"
      aria-label="Next slide"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <!-- Dots navigation -->
    <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2 z-20" id="dotsContainer">
      {images.map((_, index) => (
        <button 
          class="w-2.5 h-2.5 rounded-full bg-white/50 hover:bg-white transition dot-button"
          data-index={index}
          aria-label={`Go to slide ${index + 1}`}
        ></button>
      ))}
    </div>

    <!-- Gradient overlay -->
    <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent pointer-events-none z-10"></div>
  </div>
</div>

<script>
  let currentSlide = 0;
  let slideInterval: ReturnType<typeof setInterval>;
  const SLIDE_DURATION = 5000;

  function setupSlideshow() {
    const container = document.getElementById('slideContainer');
    const prevButton = document.getElementById('prevButton');
    const nextButton = document.getElementById('nextButton');
    const dotsContainer = document.getElementById('dotsContainer');
    const slideshow = container?.closest('.relative');
    
    if (!container || !prevButton || !nextButton || !dotsContainer || !slideshow) return;
    
    const slides = Array.from(container.children);
    const totalSlides = slides.length;

    function updateSlide(index: number) {
      currentSlide = index;
      container.style.transform = `translateX(-${currentSlide * 100}%)`;
      
      // Update dots
      const dots = dotsContainer.querySelectorAll('.dot-button');
      dots.forEach((dot, i) => {
        if (i === currentSlide) {
          dot.classList.add('bg-white', 'scale-125');
          dot.classList.remove('bg-white/50');
        } else {
          dot.classList.remove('bg-white', 'scale-125');
          dot.classList.add('bg-white/50');
        }
      });
    }

    function nextSlide() {
      updateSlide((currentSlide + 1) % totalSlides);
    }

    function prevSlide() {
      updateSlide((currentSlide - 1 + totalSlides) % totalSlides);
    }

    // Event Listeners
    prevButton.addEventListener('click', () => {
      prevSlide();
      resetInterval();
    });

    nextButton.addEventListener('click', () => {
      nextSlide();
      resetInterval();
    });

    // Setup dot navigation
    dotsContainer.querySelectorAll('.dot-button').forEach((dot, index) => {
      dot.addEventListener('click', () => {
        updateSlide(index);
        resetInterval();
      });
    });

    // Touch support
    let touchStartX = 0;
    let touchEndX = 0;

    container.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });

    container.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, { passive: true });

    function handleSwipe() {
      const swipeThreshold = 50;
      const diff = touchStartX - touchEndX;

      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
        resetInterval();
      }
    }

    function resetInterval() {
      clearInterval(slideInterval);
      startInterval();
    }

    function startInterval() {
      slideInterval = setInterval(nextSlide, SLIDE_DURATION);
    }

    // Pause on hover
    slideshow.addEventListener('mouseenter', () => clearInterval(slideInterval));
    slideshow.addEventListener('mouseleave', startInterval);

    // Initial setup
    updateSlide(0);
    startInterval();

    // Cleanup function
    return () => {
      clearInterval(slideInterval);
      prevButton.removeEventListener('click', prevSlide);
      nextButton.removeEventListener('click', nextSlide);
    };
  }

  // Setup on page load
  document.addEventListener('astro:page-load', setupSlideshow);
  // Initial setup
  setupSlideshow();
</script>